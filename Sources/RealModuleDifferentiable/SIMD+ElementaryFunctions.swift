import RealModule

#if canImport(_Differentiation)
import _Differentiation
#endif

#if !canImport(_Differentiation)
// add `AdditiveArithmetic` conformance since this is only present in the _Differentiation module which is not present everywhere
extension SIMD2: @retroactive AdditiveArithmetic where Scalar: FloatingPoint { }
extension SIMD4: @retroactive AdditiveArithmetic where Scalar: FloatingPoint { }
extension SIMD8: @retroactive AdditiveArithmetic where Scalar: FloatingPoint { }
extension SIMD16: @retroactive AdditiveArithmetic where Scalar: FloatingPoint { }
extension SIMD32: @retroactive AdditiveArithmetic where Scalar: FloatingPoint { }
extension SIMD64: @retroactive AdditiveArithmetic where Scalar: FloatingPoint { }
#endif

// Elementary functions are generated for the SIMD protocol and thus every concrete SIMD type can conform to `ElementaryFunctions`
// Actual implementation is generated by the CodeGeneratorPlugin
// Add actual conformances to `ElementaryFunctions` to individual SIMD types
extension SIMD2: @retroactive ElementaryFunctions where Scalar: FloatingPoint & ElementaryFunctions { }
extension SIMD4: @retroactive ElementaryFunctions where Scalar: FloatingPoint & ElementaryFunctions { }
extension SIMD8: @retroactive ElementaryFunctions where Scalar: FloatingPoint & ElementaryFunctions { }
extension SIMD16: @retroactive ElementaryFunctions where Scalar: FloatingPoint & ElementaryFunctions { }
extension SIMD32: @retroactive ElementaryFunctions where Scalar: FloatingPoint & ElementaryFunctions { }
extension SIMD64: @retroactive ElementaryFunctions where Scalar: FloatingPoint & ElementaryFunctions { }
